pipeline {
    agent any

    parameters {
        string(name: 'VAULT_ADDR', description: 'Vault address')
        string(name: 'ROLE_ID', description: 'AppRole ID')
        string(name: 'SECRET_ID', description: 'AppRole Secret ID')
        string(name: 'SECRET_PATH', description: 'Path to store the secret (e.g., test/myapp)')
        string(name: 'KEY1', description: 'key 1')
        string(name: 'VAL1', description: 'val 1')
        string(name: 'KEY2', description: 'key 2')
        string(name: 'VAL2', description: 'val 2')
    }

    stages {
        stage('Login and Create Secret') {
            steps {
                script {
                    def vaultToken = sh(
                    script: """
                    curl -s --request POST \\
                    --header "Content-Type: application/json" \\
                   --data '{ "role_id": "${params.ROLE_ID}", "secret_id": "${params.SECRET_ID}" }' \\
                   ${params.VAULT_ADDR}/ui/vault/auth/approle/login | jq -r '.auth.client_token'
                    """,
                 returnStdout: true
                ).trim()

                    echo "Vault token obtained: ${vaultToken}"

                    def payload = """{
                        "data": {
                            "${params.KEY1}": "${params.VAL1}",
                            "${params.KEY2}": "${params.VAL2}"
                        }
                    }"""

                    writeFile file: 'payload.json', text: payload

                    sh """
                        curl -s --request POST \\
                          --header "X-Vault-Token: ${vaultToken}" \\
                          --header "Content-Type: application/json" \\
                          --data @payload.json \\
                          ${params.VAULT_ADDR}/v1/${params.SECRET_PATH}
                    """

                    echo "Secret successfully created at path: ${params.SECRET_PATH}"
                }
            }
        }
    }
}
